#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun May  5 02:44:16 2019

@author: Mike
"""

import pandas
from sklearn import preprocessing
import matplotlib.pyplot as plt

# takes a dataset, apply preprocessing techniques, then return new dataset
def clean(source):
    
    # create copy of source data
    new_source = pandas.DataFrame(source)


    
    # specify list of numerical variables
    true_numerical_variables = [
        'Census_ProcessorCoreCount',
        'Census_PrimaryDiskTotalCapacity',
        'Census_SystemVolumeTotalCapacity',
        'Census_TotalPhysicalRAM',
        'Census_InternalPrimaryDiagonalDisplaySizeInInches',
        'Census_InternalPrimaryDisplayResolutionHorizontal',
        'Census_InternalPrimaryDisplayResolutionVertical',
        'Census_InternalBatteryNumberOfCharges'
        ]
    
    # calculate binary variables based on number of unique values
    binary_variables = [c for c in source.columns if source[c].nunique() == 2]    
    
    # set categorical variables to be any except numerical variables
    categorical_variables = [c for c in source.columns if (c not in true_numerical_variables)]
    
    # use factorize method to assign values of each column to a numeric integer category
    indexer = {}
    for col in categorical_variables:
        _, indexer[col] = pandas.factorize(source[col])
        new_source[col] = indexer[col].get_indexer(source[col])
        
    # populate missing values using the mean
    source.fillna(source.mean(), inplace=True)
    
    # normalize numerical variables
    new_source[true_numerical_variables] = preprocessing.normalize(source[true_numerical_variables])

    # calculate the number of variables in each category
    vartype_counts = [len(categorical_variables)-len(binary_variables),
              len(binary_variables)-1,
              len(true_numerical_variables)]
    vartype = ['Categorical', 'Binary', 'Numeric']
    var_color = ['lightskyblue','gold','lightcoral']
    
    # plot a pie chart of categories of variable and save image
    fig = plt.figure()
    plt.pie(vartype_counts,labels=vartype,startangle=90,autopct='%.1f%%',colors=var_color)
    plt.title('Percentage of Each Type of Features')
    plt.show()
    fig.savefig('feature_types.png')
    
    # plot sample distribution and save image
    ax = source['HasDetections'].value_counts().plot('bar',
              title='Number of Samples for Each Result',
              rot=0)
    fig2 = ax.get_figure()
    plt.show()
    fig2.savefig('label_count.png')
    
    # close plot tool
    plt.close()

    
    return new_source
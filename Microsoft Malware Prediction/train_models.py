#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun May  5 03:18:56 2019

@author: Mike
"""

import pickle
import pandas
import matplotlib.pyplot as plt
from sklearn import svm
from sklearn.metrics import accuracy_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB

# stores methods for training various models

# train and save SVM model
def train_svm(X, Y, out, K='linear',rand_state=10):
    svm1 = svm.SVC(kernel=K,random_state=rand_state)
    svm1.fit(X,Y)
    file = out
    pickle.dump(svm1, open(file, 'wb'))
    
# train and save Gaussian NB model
def train_gnb(X, Y, out):
    naive = GaussianNB()
    naive.fit(X, Y)  
    file = out
    pickle.dump(naive, open(file, 'wb'))
    
def train_rf(X, Y, out, max_est=100,rand_state=10):
    # initiate dictionary to store accuracy 
    dict2={}
    
    # mark use to split data into test and validation
    mark = round(X.shape[0]*.7)
    
    # train, test, and store accuracy
    for n in range(3,max_est):
        forest = RandomForestClassifier(n_estimators=n,random_state=rand_state)  
        forest.fit(X[:mark], Y[:mark]) 
        Y_pred = forest.predict(X[mark:]) 
        dict2[n]=accuracy(Y[mark:],Y_pred)
    
    # store all accuracy in Series for plotting as well as searching
    acc1 = pandas.Series(dict2)
    ax2 = acc1.plot('line',
            title='Random Forest Accuracy with Increasing Number of Trees',
            xlim=[0,max_est+5])
    ax2.set_xlabel('Number of Trees')
    ax2.set_ylabel('Accuracy')
    
    # plot then close plt
    fig3 = ax2.get_figure()
    plt.show()
    fig3.savefig('forest.png')    
    plt.close()
    
    # create final forest using number of estimators produced maximum accuracy
    f_forest = RandomForestClassifier(n_estimators=acc1.idxmax(),random_state=rand_state)
    f_forest.fit(X, Y) 
    # save model
    file = out
    pickle.dump(f_forest, open(file, 'wb'))
    
    
def train_knn(X, Y, out, max_est=50,rand_state=10):
    # initiate dictionary to store accuracy 
    dict2={}
    
    # mark use to split data into test and validation
    mark = round(X.shape[0]*.7)
    
    # train, test, and store accuracy
    for n in range(3,max_est):
        neighbor = KNeighborsClassifier(n_neighbors=n) 
        neighbor.fit(X[:mark], Y[:mark]) 
        Y_pred = neighbor.predict(X[mark:]) 
        dict2[n]=accuracy(Y[mark:],Y_pred)
    
    # store all accuracy in Series for plotting as well as searching
    acc1 = pandas.Series(dict2)
    ax2 = acc1.plot('line',
            title='K-Nearest Neighbor Accuracy with Increasing K',
            xlim=[0,max_est+5])
    ax2.set_xlabel('Number of Neighbors')
    ax2.set_ylabel('Accuracy')
    
    # plot then close plt
    fig3 = ax2.get_figure()
    plt.show()
    fig3.savefig('k-neighbors.png')    
    plt.close()
    
    # create final KNN using number of estimators produced maximum accuracy
    f_neighbor = KNeighborsClassifier(n_neighbors=acc1.idxmax())
    f_neighbor.fit(X, Y) 
    
    # save model
    file = out
    pickle.dump(f_neighbor, open(file, 'wb'))

# return accuracy    
def accuracy(Label, Predict):
    return accuracy_score(Label, Predict)
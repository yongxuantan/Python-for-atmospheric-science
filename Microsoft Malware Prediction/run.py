#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Apr 20 14:39:31 2019

@author: Mike
"""

import pandas
import pickle

# import custom methods
import data_clean
import train_models

from sklearn.metrics import confusion_matrix, classification_report
from sklearn.model_selection import train_test_split

def main():
		# name of data file
        trset = "data.csv"

        # read in dataset file
        data = pandas.read_csv(trset,header=0,nrows=10000)

        # remove unuse feature
        del train['MachineIdentifier']

        # apply preprocessing to dataset
        trainset = data_clean.clean(data)

        # separate label from training features
        y = trainset['HasDetections']
        del trainset['HasDetections']

        # split data into X_train X_test Y_train Y_test
        X_train, X_test, Y_train, Y_test = train_test_split(
                trainset, y, test_size=.2, random_state=10)

        # train SVM model and save model to file
        svmfile = 'svm.sav'
        train_models.train_svm(X_train, Y_train, svmfile, K='linear')

        # load svm and test
        svm = pickle.load(open(svmfile, 'rb'))
        svm_pred = svm.predict(X_test)

        print("\n===== SVM (linear) =====")
        print(classification_report(Y_test, svm_pred))
        print(confusion_matrix(Y_test, svm_pred))
        print("Accuracy: "+"{:.2%}".format(train_models.accuracy(Y_test, svm_pred)))


        # train SVM model with Gaussian kernel and save model to file
        svmfile2 = 'svm_gaussian.sav'
        train_models.train_svm(X_train, Y_train, svmfile2, K='rbf')

        # load svm and test
        svm2 = pickle.load(open(svmfile2, 'rb'))
        svm_pred2 = svm2.predict(X_test)

        print("\n===== SVM (Gaussian) =====")
        print(classification_report(Y_test, svm_pred2))
        print(confusion_matrix(Y_test, svm_pred2))
        print("Accuracy: "+"{:.2%}".format(train_models.accuracy(Y_test, svm_pred2)))


        # train Gaussian NB model and save model to file
        nbfile = 'naivebayes.sav'
        train_models.train_gnb(X_train, Y_train, nbfile)

        # load Gaussian NB and test
        naive = pickle.load(open(nbfile, 'rb'))
        nb_pred = naive.predict(X_test)
        print("\n===== Gaussian Naive Bayes =====")
        print(classification_report(Y_test, nb_pred))
        print(confusion_matrix(Y_test, nb_pred))
        print("Accuracy: "+"{:.2%}".format(train_models.accuracy(Y_test, nb_pred)))


        #train random forest and save model
        forestfile = 'forest.sav'
        train_models.train_rf(X_train, Y_train, forestfile)

        # load random forest and test
        forest = pickle.load(open(forestfile, 'rb'))
        forest_pred = forest.predict(X_test)
        # get number of estimators used
        n_est = forest.n_estimators
        print("\n===== Random Forest ("+str(n_est)+" trees) =====")
        print(classification_report(Y_test, forest_pred))
        print(confusion_matrix(Y_test, forest_pred))
        print("Accuracy: "+"{:.2%}".format(train_models.accuracy(Y_test, forest_pred)))


        #train k-nearest neightbor model and save model
        knnfile = 'KNeighbors.sav'
        train_models.train_knn(X_train, Y_train, knnfile)

        #load k-nearest neightbor model and test
        neighbor = pickle.load(open(knnfile, 'rb'))
        neighbor_pred = neighbor.predict(X_test)
        # get number of K used
        n_k = neighbor.n_neighbors
        print("\n===== K-Nearest Neighbors (K="+str(n_k)+") =====")
        print(classification_report(Y_test, neighbor_pred))
        print(confusion_matrix(Y_test, neighbor_pred))
        print("Accuracy: "+"{:.2%}".format(train_models.accuracy(Y_test, neighbor_pred)))

if __name__ == "__main__":
    main()